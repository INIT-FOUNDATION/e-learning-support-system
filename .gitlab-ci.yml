stages:
  - prebuild
  - build
  - configuration_changes
  - deploy
  - restart_haproxy

variables:
  CONTAINER_REGISTRY: "registry.digitalocean.com/aieze"
  DOCKER_COMPOSE_PROD: "/home/aieze-prod-deployment/docker-compose-lss.yaml"
  MICRO_SERVICES:
    value: ""
    description: "List of Micro Services can be deployed"
  FRONTEND_SERVICES:
    value: "oll-frontend-user,oll-frontend-support"
    description: "List of Frontend Services can be deployed"
  ENVIRONMENT:
    value: "prod"
    description: "Environment to deploy services. Possible Values (prod)"

prebuild:
  stage: prebuild
  tags:
    - production-deployment
  only:
    - web
  script:
    - |
      echo "Logging into Container Registry";
      doctl registry login;
      echo "Cleaning Existing Builds";
      docker system prune -a --force;

build:
  stage: build
  tags:
    - production-deployment
  only:
    - web
  script:
    - project_dir=$PWD;
    - |

      IFS=',' read -ra MICRO_SERVICES_ARRAY <<< "$MICRO_SERVICES"

      for service in "${MICRO_SERVICES_ARRAY[@]}"; do
        echo "Creating Build for Microservice: $service"

        cd $project_dir;
        cd $service;

        port=$(jq -r '.nodemonConfig.env.PORT' package.json)

        jq --arg port "$port" --arg service "$service" --arg common "$MICRO_SERVICES_COMMON" '
            .nodemonConfig.env = {
                "NODE_ENV": "Development",
                "PORT": ($port | tonumber),
                "MODULE": $service,
                "HOST": "localhost"
        }
        ' package.json > package-temp.json && mv package-temp.json package.json

        if grep -q "$MICRO_SERVICES_COMMON" "package.json"; then
             jq --arg common "$MICRO_SERVICES_COMMON" '
                  .dependencies[$common] = "./\($common)"
            ' package.json > package-temp.json && mv package-temp.json package.json
            rm -rf $MICRO_SERVICES_COMMON; cp -a ../$MICRO_SERVICES_COMMON .
        fi

        image="${CONTAINER_REGISTRY}/${service}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME//[_\/]/-}-${ENVIRONMENT}"
        
        docker build -t "$image" .

        echo "Build created for $service - $image"

        echo "Pushing Image $image"

        docker push $image

      done

    - |
      IFS=',' read -ra FRONTEND_SERVICES_ARRAY <<< "$FRONTEND_SERVICES"

      for service in "${FRONTEND_SERVICES_ARRAY[@]}"; do
        echo "Creating Build for Frontend Services: $service"

        cd $project_dir;
        cd $service;

        if [ "$ENVIRONMENT" == "prod-beta" ]; then
            sed -i 's/configuration=[^ ]*/configuration=production_beta/g' Dockerfile
        elif [ "$ENVIRONMENT" == "prod" ]; then
            sed -i 's/configuration=[^ ]*/configuration=production/g' Dockerfile
        fi

        image="${CONTAINER_REGISTRY}/${service}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME//[_\/]/-}-${ENVIRONMENT}"

        docker build -t "$image" .

        echo "Build created for $service - $image"

        echo "Pushing Image $image"

        docker push $image

      done

configuration_changes:
  stage: configuration_changes
  tags:
    - production-deployment
  only:
    - web
  script:
    - |
      IFS=',' read -ra SERVICES_ARRAY <<< "$([ -n "$MICRO_SERVICES" ] && [ -n "$FRONTEND_SERVICES" ] && echo "$MICRO_SERVICES," || echo "$MICRO_SERVICES")$FRONTEND_SERVICES"

      docker_compose=$([[ "$ENVIRONMENT" == "prod" ]] && echo "$DOCKER_COMPOSE_PROD" || echo "$DOCKER_COMPOSE_BETA")

      echo "Using Docker compose $docker_compose to deploy"

      echo "Backing Up Existing Docker Compose"

      cp $docker_compose $docker_compose.bak

      for service in "${SERVICES_ARRAY[@]}"; do

          image="${CONTAINER_REGISTRY}/${service}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME//[_\/]/-}-${ENVIRONMENT}"

          service=$([[ "$ENVIRONMENT" == "prod" ]] && echo "$service" || echo "$service-beta")

          yq eval '.services."'"$service"'".image="'"$image"'"' "$docker_compose" > "$docker_compose.tmp" && mv "$docker_compose.tmp" "$docker_compose"

          echo "Updating Deployment $service with $image"
      done

deploy:
  stage: deploy
  tags:
    - production-deployment
  only:
    - web
  script:
    - |
      if [ "$ENVIRONMENT" == "prod-beta" ]; then
            docker-compose -f $DOCKER_COMPOSE_BETA up -d
      elif [ "$ENVIRONMENT" == "prod" ]; then
            docker-compose -f $DOCKER_COMPOSE_PROD up -d
      fi

restart_haproxy:
  stage: restart_haproxy
  tags:
    - production-deployment
  only:
    - web
  script:
    - |
      echo "Restarting HA Proxy";

      docker restart haproxy
